
package com.example.download;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;

import com.hassanpur.tutorials.android.R;
import com.hassanpur.tutorials.android.R.id;
import com.hassanpur.tutorials.android.R.layout;
import com.hassanpur.tutorials.android.R.string;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.ProgressDialog;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.net.wifi.WifiManager;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.os.Message;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Toast;

public class AndroidFileDownloader extends Activity implements OnClickListener 
{
	
	public static final int MESSAGE_DOWNLOAD_STARTED = 1000;
	public static final int MESSAGE_DOWNLOAD_COMPLETE = 1001;
	public static final int MESSAGE_UPDATE_PROGRESS_BAR = 1002;
	public static final int MESSAGE_DOWNLOAD_CANCELED = 1003;
	public static final int MESSAGE_CONNECTING_STARTED = 1004;
	public static final int MESSAGE_ENCOUNTERED_ERROR = 1005;
	public static final int MESSAGE_NOWIFI = 1006;
	public static final int MESSAGE_WIFI = 1007;
	public static final int MESSAGE_DISABLING = 1008;
	public static final int MESSAGE_ENABLING = 1009;
	public static final int MESSAGE_UNKNOWN = 1010;
	
	private Message m;
	
	// instance variables
	private int wifi = 1;
	private AndroidFileDownloader thisActivity;
	//private Thread downloaderThread;
	private ProgressDialog progressDialog;
	private BroadcastReceiver bc;
	
	private final String TAG = this.getClass().getSimpleName();
	private final String RESTORE = ", can restore state";

	// The string "fortytwo" is used as an example of state
	private final String state = "fortytwo";
	
    /** Called when the activity is first created. */
    @Override
    public void onCreate(Bundle savedInstanceState)
    {
        super.onCreate(savedInstanceState);
        thisActivity = this;
        //downloaderThread = null;
        progressDialog = null;
        bc = null;
        setContentView(R.layout.main);
        Button button = (Button) this.findViewById(R.id.download_button);
        button.setOnClickListener(this);
        String answer = null;
        
        this.registerReceiver(this.WifiStateChangedReceiver,
                new IntentFilter(WifiManager.WIFI_STATE_CHANGED_ACTION));
        
        if (null != savedInstanceState) {
 			answer = savedInstanceState.getString("answer");
 		}
 		Log.i("tagname","testgat ");
 		Log.i(TAG, "onCreate"
 				+ (null == savedInstanceState ? "" : (RESTORE + " " + answer)));
    }
    
    private BroadcastReceiver WifiStateChangedReceiver
	  = new BroadcastReceiver(){

	 @Override
	 public void onReceive(Context context, Intent intent) {
	  // TODO Auto-generated method stub
	 
	  int extraWifiState = intent.getIntExtra(WifiManager.EXTRA_WIFI_STATE ,
	    WifiManager.WIFI_STATE_UNKNOWN);
	  
	  switch(extraWifiState){
	  case WifiManager.WIFI_STATE_DISABLED:
		  m = Message.obtain(thisActivity.activityHandler,
				AndroidFileDownloader.MESSAGE_NOWIFI);
    			thisActivity.activityHandler.sendMessage(m);
	   break;
	  case WifiManager.WIFI_STATE_DISABLING:
		  m = Message.obtain(thisActivity.activityHandler,
				AndroidFileDownloader.MESSAGE_DISABLING);
    			thisActivity.activityHandler.sendMessage(m);
	   break;
	  case WifiManager.WIFI_STATE_ENABLED:
		  m = Message.obtain(thisActivity.activityHandler,
				AndroidFileDownloader.MESSAGE_WIFI);
    			thisActivity.activityHandler.sendMessage(m);
	   break;
	  case WifiManager.WIFI_STATE_ENABLING:
		  m = Message.obtain(thisActivity.activityHandler,
				AndroidFileDownloader.MESSAGE_ENABLING);
    			thisActivity.activityHandler.sendMessage(m);
	   break;
	  case WifiManager.WIFI_STATE_UNKNOWN:
		  m = Message.obtain(thisActivity.activityHandler,
				AndroidFileDownloader.MESSAGE_UNKNOWN);
    			thisActivity.activityHandler.sendMessage(m);
	   break;
	  }
	 }};

    @Override
	protected void onRestart() {
		super.onRestart();
		// Notification that the activity will be started
		Log.i(TAG, "onRestart");
	}
    
    protected void onStart() {
		super.onStart();
		// Notification that the activity is starting
		Log.i(TAG, "onStart");
	
	}

    protected void onPause() {
		super.onPause();
		// Notification that the activity will stop interacting with the user
		Log.i(TAG, "onPause" + (isFinishing() ? " Finishing" : ""));
	}
    
    /** Called when the user clicks on something. */
	@Override
	public void onClick(View view)
	{
		EditText urlInputField = (EditText) this.findViewById(R.id.url_input);
		String urlInput = urlInputField.getText().toString();
		//downloaderThread = new DownloaderThread(thisActivity, urlInput);
		new DownloadFileFromURL(thisActivity).execute(urlInput);
		
		
	}
	
	/**
	 * This is the Handler for this activity. It will receive messages from the
	 * DownloaderThread and make the necessary updates to the UI.
	 */
	public Handler activityHandler = new Handler()
	{
		
		public void handleMessage(Message msg)
		{
			switch(msg.what)
			{
				/*
				 * Handling MESSAGE_UPDATE_PROGRESS_BAR:
				 * 1. Get the current progress, as indicated in the arg1 field
				 *    of the Message.
				 * 2. Update the progress bar.
				 */
			
				
				case MESSAGE_UPDATE_PROGRESS_BAR:
					if(progressDialog != null)
					{
						int currentProgress = msg.arg1;
						progressDialog.setProgress(currentProgress);
					}
					break;
				
				/*
				 * Handling MESSAGE_CONNECTING_STARTED:
				 * 1. Get the URL of the file being downloaded. This is stored
				 *    in the obj field of the Message.
				 * 2. Create an indeterminate progress bar.
				 * 3. Set the message that should be sent if user cancels.
				 * 4. Show the progress bar.
				 */
				case MESSAGE_CONNECTING_STARTED:
					if(msg.obj != null && msg.obj instanceof String)
					{
						String url = (String) msg.obj;
						// truncate the url
						if(url.length() > 16)
						{
							String tUrl = url.substring(0, 15);
							tUrl += "...";
							url = tUrl;
						}
						String pdTitle = thisActivity.getString(R.string.progress_dialog_title_connecting);
						String pdMsg = thisActivity.getString(R.string.progress_dialog_message_prefix_connecting);
						pdMsg += " " + url;
						
						dismissCurrentProgressDialog();
						
						progressDialog = new ProgressDialog(thisActivity);
						progressDialog.setTitle(pdTitle);
						progressDialog.setMessage(pdMsg);
						progressDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);
						progressDialog.setIndeterminate(true);
						// set the message to be sent when this dialog is canceled
						Message newMsg = Message.obtain(this, MESSAGE_DOWNLOAD_CANCELED);
						progressDialog.setCancelMessage(newMsg);
						progressDialog.show();
					}
					break;
					
				/*
				 * Handling MESSAGE_DOWNLOAD_STARTED:
				 * 1. Create a progress bar with specified max value and current
				 *    value 0; assign it to progressDialog. The arg1 field will
				 *    contain the max value.
				 * 2. Set the title and text for the progress bar. The obj
				 *    field of the Message will contain a String that
				 *    represents the name of the file being downloaded.
				 * 3. Set the message that should be sent if dialog is canceled.
				 * 4. Make the progress bar visible.
				 */
				case MESSAGE_DOWNLOAD_STARTED:
					// obj will contain a String representing the file name
					if(msg.obj != null && msg.obj instanceof String)
					{
						int maxValue = msg.arg1;
						String fileName = (String) msg.obj;
						String pdTitle = thisActivity.getString(R.string.progress_dialog_title_downloading);
						String pdMsg = thisActivity.getString(R.string.progress_dialog_message_prefix_downloading);
						pdMsg += " " + fileName;
						
						dismissCurrentProgressDialog();
						progressDialog = new ProgressDialog(thisActivity);
						progressDialog.setTitle(pdTitle);
						progressDialog.setMessage(pdMsg);
						progressDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);
						progressDialog.setProgress(0);
						progressDialog.setMax(maxValue);
						// set the message to be sent when this dialog is canceled
						Message newMsg = Message.obtain(this, MESSAGE_DOWNLOAD_CANCELED);
						progressDialog.setCancelMessage(newMsg);
						progressDialog.setCancelable(true);
						progressDialog.show();
					}
					break;
				
				/*
				 * Handling MESSAGE_DOWNLOAD_COMPLETE:
				 * 1. Remove the progress bar from the screen.
				 * 2. Display Toast that says download is complete.
				 */
				case MESSAGE_DOWNLOAD_COMPLETE:
					dismissCurrentProgressDialog();
					displayMessage(getString(R.string.user_message_download_complete));
					break;
					
				/*
				 * Handling MESSAGE_DOWNLOAD_CANCELLED:
				 * 1. Interrupt the downloader thread.
				 * 2. Remove the progress bar from the screen.
				 * 3. Display Toast that says download is complete.
				 */
				case MESSAGE_DOWNLOAD_CANCELED:
					/*if(downloaderThread != null)
					{
						downloaderThread.interrupt();
					}
					*/
					dismissCurrentProgressDialog();
					displayMessage(getString(R.string.user_message_download_canceled));
					break;
				
				/*
				 * Handling MESSAGE_ENCOUNTERED_ERROR:
				 * 1. Check the obj field of the message for the actual error
				 *    message that will be displayed to the user.
				 * 2. Remove any progress bars from the screen.
				 * 3. Display a Toast with the error message.
				 */
				case MESSAGE_ENCOUNTERED_ERROR:
					// obj will contain a string representing the error message
					if(msg.obj != null && msg.obj instanceof String)
					{
						String errorMessage = (String) msg.obj;
						//dismissCurrentProgressDialog();
						displayMessage(errorMessage);
					}
					break;
					
				case MESSAGE_NOWIFI:
					wifi = 0;
					String onStopMessage = "Download stalled";
					displayMessage(onStopMessage);
					thisActivity.onStop();
					break;
					
				case MESSAGE_WIFI:
					wifi = 1;
					String onRestartMessage = "Download resumed";
					displayMessage(onRestartMessage);
					thisActivity.onRestart();
					break;
					
				default:
					// nothing to do here
					break;
			}
		}
	};
	
	/**
	 * If there is a progress dialog, dismiss it and set progressDialog to
	 * null.
	 */
	protected void onStop(){
		super.onStop();
		if(wifi!=0){
			
			Log.i(TAG, "onStop_wifi");
		}
		else
			Log.i(TAG, "onStop_no_wifi");
		
		
	}
	protected void onDestroy(){
		super.onDestroy();/*
		if(downloaderThread != null)
		{
			downloaderThread.interrupt();
		}
		*/
		dismissCurrentProgressDialog();
		displayMessage(getString(R.string.user_message_download_canceled));
		
		Log.i(TAG,
				"onDestroy "
						// Log which, if any, configuration changed
						+ Integer.toString(getChangingConfigurations(), 16));
		
	}
	public void dismissCurrentProgressDialog()
	{
		if(progressDialog != null)
		{
			progressDialog.hide();
			progressDialog.dismiss();
			progressDialog = null;
		}
	}
	
	/**
	 * Displays a message to the user, in the form of a Toast.
	 * @param message Message to be displayed.
	 */
	public void displayMessage(String message)
	{
		if(message != null)
		{
			Toast.makeText(thisActivity, message, Toast.LENGTH_SHORT).show();
		}
	}
	


@SuppressLint("NewApi")
class DownloadFileFromURL extends AsyncTask<String, Void, String> {
	private static final int DOWNLOAD_BUFFER_SIZE = 4096;
	AndroidFileDownloader parentActivity;
	public DownloadFileFromURL(AndroidFileDownloader a){
		parentActivity = a;
	}
	/**
	 * Downloading file in background thread
	 * 
	 * 
	 * */
	
	@Override
	public String doInBackground(String... downloadUrl) {
		
		
	
		  
			URL url;
			URLConnection conn;
			int fileSize, lastSlash;
			String fileName;
			BufferedInputStream inStream;
			BufferedOutputStream outStream;
			File outFile;
			FileOutputStream fileStream;
			Message msg;
			
			// we're going to connect now
			msg = Message.obtain(parentActivity.activityHandler,
					AndroidFileDownloader.MESSAGE_CONNECTING_STARTED,
					0, 0, downloadUrl);
			parentActivity.activityHandler.sendMessage(msg);
			
			try
			{
				url = new URL(downloadUrl[0]);
				conn = url.openConnection();
				conn.setUseCaches(false);
				fileSize = conn.getContentLength();
				
				// get the filename
				lastSlash = url.toString().lastIndexOf('/');
				fileName = "file.bin";
				if(lastSlash >=0)
				{
					fileName = url.toString().substring(lastSlash + 1);
				}
				if(fileName.equals(""))
				{
					fileName = "file.bin";
				}
				
				// notify download start
				int fileSizeInKB = fileSize / 1024;
				msg = Message.obtain(parentActivity.activityHandler,
						AndroidFileDownloader.MESSAGE_DOWNLOAD_STARTED,
						fileSizeInKB, 0, fileName);
				parentActivity.activityHandler.sendMessage(msg);
				
				// start download
				inStream = new BufferedInputStream(conn.getInputStream());
				outFile = new File(Environment.getExternalStorageDirectory() + "/" + fileName);
				fileStream = new FileOutputStream(outFile);
				outStream = new BufferedOutputStream(fileStream, DOWNLOAD_BUFFER_SIZE);
				byte[] data = new byte[DOWNLOAD_BUFFER_SIZE];
				int bytesRead = 0, totalRead = 0;
				while((bytesRead = inStream.read(data, 0, data.length)) >= 0)
				{
					outStream.write(data, 0, bytesRead);
					
					// update progress bar
					totalRead += bytesRead;
					int totalReadInKB = totalRead / 1024;
					
					msg = Message.obtain(parentActivity.activityHandler,
							AndroidFileDownloader.MESSAGE_UPDATE_PROGRESS_BAR,
							totalReadInKB, 0);
					parentActivity.activityHandler.sendMessage(msg);
				}
				
				outStream.close();
				fileStream.close();
				inStream.close();
				
				
				
					// notify completion
					msg = Message.obtain(parentActivity.activityHandler,
							AndroidFileDownloader.MESSAGE_DOWNLOAD_COMPLETE);
					parentActivity.activityHandler.sendMessage(msg);
				
			}
			catch(MalformedURLException e)
			{
				String errMsg = parentActivity.getString(R.string.error_message_bad_url);
				msg = Message.obtain(parentActivity.activityHandler,
						AndroidFileDownloader.MESSAGE_ENCOUNTERED_ERROR,
						0, 0, errMsg);
				parentActivity.activityHandler.sendMessage(msg);
			}
			catch(FileNotFoundException e)
			{
				String errMsg = parentActivity.getString(R.string.error_message_file_not_found);
				msg = Message.obtain(parentActivity.activityHandler,
						AndroidFileDownloader.MESSAGE_ENCOUNTERED_ERROR,
						0, 0, errMsg);
				parentActivity.activityHandler.sendMessage(msg); 
			}
			catch(Exception e)
			{
				String errMsg = parentActivity.getString(R.string.error_message_general);
				msg = Message.obtain(parentActivity.activityHandler,
						AndroidFileDownloader.MESSAGE_ENCOUNTERED_ERROR,
						0, 0, errMsg);
				parentActivity.activityHandler.sendMessage(msg); 
			}
			return null;
		}
	}
}