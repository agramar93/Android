package com.example.first;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.net.wifi.WifiManager;
import android.os.AsyncTask;
import android.os.Environment;
import android.os.Message;

class DownloadFileFromURL extends AsyncTask<String, Void, String> {
	private static final int DOWNLOAD_BUFFER_SIZE = 4096;
	Message msg;
	DownloadFileFromURL thisActivity;
	
	MainActivity parentActivity;
	public DownloadFileFromURL(MainActivity a){
		parentActivity = a;
		thisActivity = this;
		
	}
	/**
	 * Downloading file in background thread
	 * 
	 * 
	 * */
	public BroadcastReceiver WifiStateChangedReceiver
	  = new BroadcastReceiver(){

	 private int wifi =1;

	@Override
	 public void onReceive(Context context, Intent intent) {
	  // TODO Auto-generated method stub
	 
	  int extraWifiState = intent.getIntExtra(WifiManager.EXTRA_WIFI_STATE ,
	    WifiManager.WIFI_STATE_UNKNOWN);
	  
	  switch(extraWifiState){
	  case WifiManager.WIFI_STATE_DISABLED:
		  msg = Message.obtain(parentActivity.activityHandler,
				MainActivity.MESSAGE_NOWIFI);
		  if(wifi!=1)
			try {
				thisActivity.wait();
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
  			parentActivity.activityHandler.sendMessage(msg);
	   break;
	  
	  case WifiManager.WIFI_STATE_ENABLED:
		  msg = Message.obtain(parentActivity.activityHandler,
				MainActivity.MESSAGE_WIFI);
		  parentActivity.activityHandler.sendMessage(msg);
		  if(wifi>1)
			  thisActivity.notify();
		  wifi++;
  			
	   break;
	  
	  case WifiManager.WIFI_STATE_UNKNOWN:
		  msg = Message.obtain(parentActivity.activityHandler,
				MainActivity.MESSAGE_UNKNOWN);
  			parentActivity.activityHandler.sendMessage(msg);
	   break;
	  }
	 }};

	
	@Override
	public String doInBackground(String... downloadUrl) {
		
	
		  
			URL url;
			URLConnection conn;
			int fileSize, lastSlash;
			String fileName;
			BufferedInputStream inStream;
			BufferedOutputStream outStream;
			File outFile;
			FileOutputStream fileStream;
			
			
			// we're going to connect now
			msg = Message.obtain(parentActivity.activityHandler,
					MainActivity.MESSAGE_CONNECTING_STARTED,
					0, 0, downloadUrl);
			parentActivity.activityHandler.sendMessage(msg);
			
			try
			{
				url = new URL(downloadUrl[0]);
				conn = url.openConnection();
				conn.setUseCaches(false);
				fileSize = conn.getContentLength();
				
				// get the filename
				lastSlash = url.toString().lastIndexOf('/');
				fileName = "file.bin";
				if(lastSlash >=0)
				{
					fileName = url.toString().substring(lastSlash + 1);
				}
				if(fileName.equals(""))
				{
					fileName = "file.bin";
				}
				
				// notify download start
				int fileSizeInKB = fileSize / 1024;
				msg = Message.obtain(parentActivity.activityHandler,
						MainActivity.MESSAGE_DOWNLOAD_STARTED,
						fileSizeInKB, 0, fileName);
				parentActivity.activityHandler.sendMessage(msg);
				
				// start download
				inStream = new BufferedInputStream(conn.getInputStream());
				outFile = new File(Environment.getExternalStorageDirectory() + "/" + fileName);
				fileStream = new FileOutputStream(outFile);
				outStream = new BufferedOutputStream(fileStream, DOWNLOAD_BUFFER_SIZE);
				byte[] data = new byte[DOWNLOAD_BUFFER_SIZE];
				int bytesRead = 0, totalRead = 0;
				while((bytesRead = inStream.read(data, 0, data.length)) >= 0)
				{
					outStream.write(data, 0, bytesRead);
					
					// update progress bar
					totalRead += bytesRead;
					int totalReadInKB = totalRead / 1024;
					
					msg = Message.obtain(parentActivity.activityHandler,
							MainActivity.MESSAGE_UPDATE_PROGRESS_BAR,
							totalReadInKB, 0);
					parentActivity.activityHandler.sendMessage(msg);
				}
				
				outStream.close();
				fileStream.close();
				inStream.close();
				
				
				
					// notify completion
					msg = Message.obtain(parentActivity.activityHandler,
							MainActivity.MESSAGE_DOWNLOAD_COMPLETE);
					parentActivity.activityHandler.sendMessage(msg);
				
			}
			catch(MalformedURLException e)
			{
				String errMsg = parentActivity.getString(R.string.error_message_bad_url);
				msg = Message.obtain(parentActivity.activityHandler,
						MainActivity.MESSAGE_ENCOUNTERED_ERROR,
						0, 0, errMsg);
				parentActivity.activityHandler.sendMessage(msg);
			}
			catch(FileNotFoundException e)
			{
				String errMsg = parentActivity.getString(R.string.error_message_file_not_found);
				msg = Message.obtain(parentActivity.activityHandler,
						MainActivity.MESSAGE_ENCOUNTERED_ERROR,
						0, 0, errMsg);
				parentActivity.activityHandler.sendMessage(msg); 
			}
			catch(Exception e)
			{
				String errMsg = parentActivity.getString(R.string.error_message_general);
				msg = Message.obtain(parentActivity.activityHandler,
						MainActivity.MESSAGE_ENCOUNTERED_ERROR,
						0, 0, errMsg);
				parentActivity.activityHandler.sendMessage(msg); 
			}
			return null;
		}
	}